import time
from datetime import datetime
from random import choice
import requests
from urllib3.exceptions import ProtocolError
import json

from telebot import types
from types import SimpleNamespace
import mysql


from bot import admin, admin_groups, campus
from bot.handlers import week_type, create_week_keyboard
from bot.schedule_handlers import get_schedule
from config import *
from bot.bd import *
from bot.admin_groups import all_groups, import_group

print(Fore.GREEN+"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

hello = [
    "üëãüèø –ü—Ä–∏–≤–µ—Ç, ",
    "üëãüèø –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, ",
    "üëãüèø –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, ",
    "üëãüèø –•–µ–π, ",
    "üëãüèø –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ",
    "üëãüèø –†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è, ",
    "üëãüèø –ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç, ",
    "üëãüèø Hola, ",
    "üëãüèø –ó–¥—Ä–∞–≤–∏—è –∂–µ–ª–∞—é, ",
    "üëãüèø –ó–¥–∞—Ä–æ–≤–∞, "
]

texts = [
    "üè¨ –í—ã–±–µ—Ä–∏ –∫–æ—Ä–ø—É—Å, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –î–ª—è –∑–≤–æ–Ω–∫–æ–≤ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ‚¨áÔ∏è.",
    "üè¨ –ü–æ—Å–º–æ—Ç—Ä–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –≤—ã–±—Ä–∞–≤ –∫–æ—Ä–ø—É—Å! –ó–≤–æ–Ω–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ –∫–Ω–æ–ø–∫–µ ‚¨áÔ∏è.",
    "üè¨ –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –≤—ã–±–µ—Ä–∏ –∫–æ—Ä–ø—É—Å. –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤ –∂–¥–µ—Ç —Ç–µ–±—è ‚¨áÔ∏è.",
    "üè¨ –í—ã–±–µ—Ä–∏ –∫–æ—Ä–ø—É—Å –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ó–≤–æ–Ω–∫–∏ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ‚¨áÔ∏è.",
    "üè¨ –ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –∂–º–∏ –Ω–∞ –∫–æ—Ä–ø—É—Å. –î–ª—è –∑–≤–æ–Ω–∫–æ–≤ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ‚¨áÔ∏è.",
    "üè¨ –í—ã–±–µ—Ä–∏ –∫–æ—Ä–ø—É—Å, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ! –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤ —Ç–æ–∂–µ —Ç—É—Ç ‚¨áÔ∏è.",
    "üè¨ –í—ã–±–∏—Ä–∞–π –∫–æ—Ä–ø—É—Å, —á—Ç–æ–±—ã –≥–ª—è–Ω—É—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ó–≤–æ–Ω–∫–∏? –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚¨áÔ∏è.",
    "üè¨ –•–æ—á–µ—à—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ? –í—ã–±–∏—Ä–∞–π –∫–æ—Ä–ø—É—Å. –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤ –≤–Ω–∏–∑—É ‚¨áÔ∏è.",
    "üè¨ –ñ–º–∏ –Ω–∞ —Å–≤–æ–µ –º–µ—Å—Ç–æ –æ–±–∏—Ç–∞–Ω–∏—è, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ó–≤–æ–Ω–∫–∏ —Å–º–æ—Ç—Ä–∏ –ø–æ –∫–Ω–æ–ø–∫–µ ‚¨áÔ∏è.",
    "üè¨ –ù–µ –∑–∞–±—É–¥—å –≤—ã–±—Ä–∞—Ç—å –∫–∞–º–ø—É—Å –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ö–Ω–æ–ø–∫–∞ –∑–≤–æ–Ω–∫–æ–≤ —É–∂–µ –∑–¥–µ—Å—å ‚¨áÔ∏è.",
    "üè¨ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∂–¥–µ—Ç, –≤—ã–±–µ—Ä–∏ –∫–æ—Ä–ø—É—Å. –î–ª—è –∑–≤–æ–Ω–∫–æ–≤ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ‚¨áÔ∏è.",
    "üè¨ –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –≤—ã–±–µ—Ä–∏ –∫–æ—Ä–ø—É—Å. –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤ –Ω–µ –ø–æ–¥–≤–µ–¥–µ—Ç ‚¨áÔ∏è.",
    "üè¨ –í—ã–±–∏—Ä–∞–π –∫–æ—Ä–ø—É—Å –∏ —Å–º–æ—Ç—Ä–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ó–≤–æ–Ω–∫–∏? –ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚¨áÔ∏è.",
    "üè¨ –í—ã–±–∏—Ä–∞–π –∫–æ—Ä–ø—É—Å –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è! –ó–≤–æ–Ω–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ –∫–Ω–æ–ø–∫–µ ‚¨áÔ∏è.",
    "üè¨ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–æ—Ä–ø—É—Å—ã –¥–æ—Å—Ç—É–ø–Ω–æ, –≤—ã–±–µ—Ä–∏ –µ–≥–æ. –ö–Ω–æ–ø–∫–∞ –∑–≤–æ–Ω–∫–æ–≤ —Å–ø—Ä–∞–≤–∞ ‚¨áÔ∏è.",
    "üè¨ –ì–æ—Ç–æ–≤ —É–≤–∏–¥–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ? –ñ–º–∏ –Ω–∞ –≤—ã–±–æ—Ä –∫–æ—Ä–ø—É—Å–∞. –ó–≤–æ–Ω–∫–∏ —Å–º–æ—Ç—Ä–∏ –∫–Ω–æ–ø–∫–æ–π ‚¨áÔ∏è.",
    "üè¨ –í—ã–±–∏—Ä–∞–π –∫–æ—Ä–ø—É—Å –∏ —É–∑–Ω–∞–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ö–Ω–æ–ø–∫–∞ –∑–≤–æ–Ω–∫–æ–≤ —Ä—è–¥–æ–º ‚¨áÔ∏è.",
    "üè¨ –£–∑–Ω–∞–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –∫–æ—Ä–ø—É—Å–µ. –î–ª—è –∑–≤–æ–Ω–∫–æ–≤ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ‚¨áÔ∏è."
]


def get_group(campus: str) -> dict :
    with open("data/all_groups.json", "r", encoding="UTF-8") as file:
        data = json.load(file)
        return data[campus]


def text_random() -> str:
    """–°–ª—É—á–∞–π–Ω–æ–µ —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å–≤–∏—è"""
    r = choice(texts)
    return r   


def hello_random() -> str:
    """–°–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å–≤–∏–µ"""
    r = choice(hello)
    return r


def get_keyboard_with_days(is_admin: bool = False, day: bool = False, user_id: int = 0):
    """–†–µ–ø–ª–µ–π-–ö–µ–π–±–æ–∞—Ä–¥"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    has_group, _ = admin.check_user_group(user_id)
    if day or has_group:
        btn_today = types.KeyboardButton('üìÖ –°–µ–≥–æ–¥–Ω—è')
        btn_tomorrow = types.KeyboardButton('üìÖ –ó–∞–≤—Ç—Ä–∞')
        keyboard.add(btn_today, btn_tomorrow)

    btn_start = types.KeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    btn_schedule = types.KeyboardButton('üè£ –í—Å–µ –∫–æ—Ä–ø—É—Å—ã')
    btn_my_group = types.KeyboardButton('üóìÔ∏è –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
    keyboard.add(btn_my_group)
    keyboard.add(btn_start, btn_schedule)

    if is_admin:
        btn_admin = types.KeyboardButton('‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å')
        keyboard.add(btn_admin)

    return keyboard


@bot.callback_query_handler(func=lambda call: call.data == "remove_admin")
def remove_admin(callback):
    admin.remove_admin_handler(callback)
    
    
@bot.callback_query_handler(func=lambda call: call.data == "ban_menu")
def ban_menu(callback):
    admin.handle_ban_menu(callback)


@bot.callback_query_handler(func=lambda call: call.data == "ban_user")
def ban_user_callback(callback):
    admin.handle_ban_user(callback)
   
    
@bot.callback_query_handler(func=lambda call: call.data == "unban_user")
def ban_menu(callback):    
    admin.handle_unban_user(callback)


@bot.callback_query_handler(func=lambda call: call.data == "add_admin")
def add_admin(callback):
    admin.add_admin_handler(callback)


@bot.callback_query_handler(func=lambda call: call.data == "send_spam")
def send_spam(callback):
    admin.handle_spam(callback)


@bot.callback_query_handler(func=lambda call: call.data == "cancel_spam")
def cancel_spam(callback):
    admin.cancel_spam(callback)


@bot.callback_query_handler(func=lambda call: call.data == "log")
def check_log(callback):
    admin.handle_log(callback)


@bot.callback_query_handler(func=lambda call: call.data == "showlog")
def show_log(callback):
    admin.handle_show_log(callback)


@bot.callback_query_handler(func=lambda call: call.data == "delete_log")
def delete_log(callback):
    admin.handle_delete_log(callback)
    
    
@bot.callback_query_handler(func=lambda call: call.data == "delete_log_yes")
def delete_log_yes(callback):
    admin.handle_log_delete_yes(callback)


@bot.callback_query_handler(func=lambda call: call.data == "users")
def show_users(callback):
    admin.handle_users(callback)


@bot.callback_query_handler(func=lambda call: call.data == "user_id")
def show_user_id(callback):
    admin.handle_user_id(callback)
    
    
@bot.callback_query_handler(func=lambda call: "_cancel_add" in call.data)
def cancel_add_admin(callback):
    admin_groups.cancel_add_admin(callback, bot)


def correct_day_form(number: int) -> str:
    if number == 1:
        day = "–¥–µ–Ω—å"
        return day
    elif 2 <= number <= 4:
        day = "–¥–Ω—è"
        return day
    else:
        day = "–¥–Ω–µ–π"
        return day


def add_my_group(message) -> None:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –≥—Ä—É–ø–ø—ã –∏ –±–æ—Ç –≤—ã–≤–æ–¥–∏—Ç –≥—Ä—É–ø–ø—ã —Å  —Å–æ–ø–∞–¥–∞—é—â–∏–º –∏–º–µ–Ω–µ–º –∏ callbeck_data - add_user_in_group_'name'"""
    group = message.text.upper()
    markup = types.InlineKeyboardMarkup()
    flag = False
    for g in all_groups:
        for sg in all_groups[g]["subgroups"]:
            eng_name = sg
            rus_name = all_groups[g]["subgroups"][sg]
            if group in rus_name:
                markup.add(types.InlineKeyboardButton(f"{rus_name}", callback_data=f"add_user_in_group_{eng_name}"))
                flag = True
    if flag: text = f"‚úÖ –í–æ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è:"
    else: text = f"‚ùå –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π"
    bot.send_message(message.chat.id, text=text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "delete_my_group")
def delete_user_group(call):
    """–§—É–Ω–∫–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã"""
    connection = mysql.connector.connect(
        host=host,
        user=user,
        password=password,
        database=db_name
    )
    cursor = connection.cursor()
    cursor.execute("SELECT group_code FROM user_groups WHERE user_id = %s", (call.message.chat.id,))
    group_result = cursor.fetchone()
    
    if group_result:
        group_code = group_result[0]
        cursor.execute("SELECT student_ids FROM `groups` WHERE group_code = %s", (group_code,))
        result = cursor.fetchone()
        
        if result and result[0]:
            student_ids = result[0].split(',')
            student_ids.remove(str(call.message.chat.id))
            new_ids = ','.join(student_ids) if student_ids else None
            cursor.execute("UPDATE `groups` SET student_ids = %s WHERE group_code = %s", 
                         (new_ids, group_code))
    
    cursor.execute("DELETE FROM user_groups WHERE user_id = %s", (call.message.chat.id,))
    
    connection.commit()
    cursor.close()
    connection.close()
    
    
    user_id = call.message.chat.id
    fake_message = SimpleNamespace(from_user=SimpleNamespace(id=user_id))
    is_admin_flag = admin.is_admin(fake_message)
    keyboard = get_keyboard_with_days(is_admin=is_admin_flag)
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.id)

    bot.send_message(
        call.message.chat.id,
        text="‚úÖ –í–∞—à–∞ –≥—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞",
        reply_markup=keyboard
    )


@bot.message_handler(commands=["stats"])
def main(message):    
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∫–∏ –±–æ—Ç–∞"""
    len_user = len(admin.get_users())
    date_start = datetime(2025, 1, 27)
    current_date = datetime.now()
    delta = current_date - date_start
    days = delta.days+1
    markup = types.InlineKeyboardMarkup()
    main = types.InlineKeyboardButton("üë£ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")
    markup.row(main)
    bot.send_message(
        message.chat.id,
        text=f"üë´ –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è –≤ –±–æ—Ç–µ - {len_user} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        
             f"‚åõÔ∏è –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —É–∂–µ - {days} {correct_day_form(days)}",
        reply_markup=markup
    )


@bot.message_handler(commands=["start"])
def main(message):
    "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    ban_user = admin.get_banned_users()
    users = admin.get_users()
    if message.chat.id not in users:
        users.add(message.chat.id)
        admin.save_users(message)

    if message.chat.id not in ban_user:        
        keyboard = get_keyboard_with_days(is_admin = admin.is_admin(message), user_id = message.chat.id)
            
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton('üè£ –í—Å–µ –∫–æ—Ä–ø—É—Å—ã', callback_data='Korp')
        btn3 = types.InlineKeyboardButton('üîî –ó–≤–æ–Ω–∫–∏', callback_data='zvonki')
        info = types.InlineKeyboardButton("üìÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data = "info")
        markup.row(btn1, btn3)
        markup.row(info)

        
        if admin.is_admin(message):
            adm = types.InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admpan")  
            markup.add(adm)


        sent_message = bot.send_message(
            message.chat.id,
            text = hello_random()+message.from_user.first_name,
            reply_markup=keyboard
            
        )
        
        bot.send_message(
            message.chat.id,
            text = text_random(),

            reply_markup=markup
        )

    else:
        bot.send_message(
            message.chat.id,
            text = "–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã"
        )

@bot.callback_query_handler(func=lambda call: call.data == "start")
def handle_back_button(callback):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é(–ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥)"""
    ban_user = admin.get_banned_users()
    if callback.message.chat.id not in ban_user:
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton('üè£ –í—ã–±—Ä–∞—Ç—å –∫–æ—Ä–ø—É—Å', callback_data='Korp')
        btn3 = types.InlineKeyboardButton('üîî –ó–≤–æ–Ω–∫–∏', callback_data='zvonki')
        info = types.InlineKeyboardButton("üìÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data = "info")
        markup.row(btn1, btn3)
        markup.row(info)

        if admin.is_admin(callback):
            adm = types.InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admpan")        
            markup.add(adm) 
                               
        bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id,
                                text = hello_random()+"—Å–Ω–æ–≤–∞ "+callback.from_user.first_name+". \n\n"+text_random(), reply_markup=markup)
    else:
        bot.send_message(
            callback.message.chat.id,
            text = "üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã!"
        )


@bot.callback_query_handler(func=lambda call: call.data == "admpan")
def handle_adm_back_button(callback):
    if admin.is_admin(callback):
        markup = types.InlineKeyboardMarkup()
        add = types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ê–¥–º–∏–Ω–∞", callback_data="add_admin")       
        remove = types.InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –ê–¥–º–∏–Ω–∞", callback_data="remove_admin") 
        spam = types.InlineKeyboardButton("üí¨ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="send_spam") 
        users = types.InlineKeyboardButton("üë• –ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", callback_data="users") 
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")
        log = types.InlineKeyboardButton("üóí –õ–æ–≥–∏", callback_data="log")
        ban = types.InlineKeyboardButton("üö´ –ë–∞–Ω—ã", callback_data="ban_menu")
        markup.row(add, remove)
        markup.add(spam, log)
        markup.add(users, ban)
        markup.add(back)
        
        bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id, text=f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ –∞–¥–º–∏–Ω, {callback.from_user.first_name} !\n\n –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)     
    else:
        markup = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")
        markup.add(back)
        bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id, text="üîí–£ –≤–∞—Å –Ω–µ—Ç—É –¥–æ—Å—Ç—É–ø–∞\n\n–ï—Å–ª–∏ –≤—ã –∞–¥–º–∏–Ω –∫–∞–∫–æ–π —Ç–æ –ª–∏–±–æ –≥—Ä—É–ø–ø—ã, —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —á–µ—Ä–µ–∑ –≤–∞—à—É –≥—Ä—É–ø–ø—É.", reply_markup=markup)


@bot.callback_query_handler(func = lambda call: call.data == "info")
def handle_info_button(callback):    
    markup = types.InlineKeyboardMarkup()
    help = types.InlineKeyboardButton("üí´–ü–æ–º–æ—â—å", url = "")
    projects = types.InlineKeyboardButton("üíª –î—Ä—É–≥–∏–µ –ø—Ä–æ–µ–∫—Ç—ã", callback_data="projects")
    donate = types.InlineKeyboardButton("üí∞ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å", callback_data="donate")
    back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")
    markup.row(help)
    markup.row(projects)
    markup.row(donate)
    markup.add(back)
    bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id,
                          text = "ü§ñ –ë–æ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ –∑–≤–æ–Ω–∫–æ–≤ –≤ –∫–æ–ª–ª–µ–¥–∂–µ."
                          "\n\n‚ÄºÔ∏è –î–∞–Ω–Ω—ã–π –±–æ—Ç –Ω–∞–ø–∏—Å–∞–Ω –Ω–µ –∫–æ–ª–ª–µ–¥–∂–æ–º."
                          "\n\nü´° –ü–æ–∫–∞ —á—Ç–æ —ç—Ç–æ—Ç –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–µ—Ç–∞ —Ç–µ—Å—Ç–µ, –µ—Å–ª–∏ –≤—ã –≤–¥—Ä—É–≥ –æ–±–Ω–∞—Ä—É–∂–∏—Ç–µ –∫–∞–∫—É—é —Ç–æ –æ—à–∏–±–∫—É, —Ç–æ –ø–∏—à–∏—Ç–µ –∏ –º—ã —Å—Ä–∞–∑—É –µ–µ –∏—Å–ø—Ä–∞–≤–∏–º."
                          "\n\nüî´ –ë–æ—Ç –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."
                          "\n\nü§ì –í —Å–ª—É—á–∞–µ –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ –∂–∞–ª–æ–±—ã —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", reply_markup = markup)

@bot.callback_query_handler(func=lambda call: call.data == "donate")
def handle_donate_button(callback):
    markup = types.InlineKeyboardMarkup()
    back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="info")
    donate = types.InlineKeyboardButton("üíµ –°—á–µ—Ç", url="")
    markup.add(donate)
    markup.add(back)
    
    bot.edit_message_text(
        chat_id=callback.message.chat.id, 
        message_id=callback.message.id, 
        text="üí∏ –ú–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–∞—Å –∏ –ø–æ–º–æ—á—å —Å –æ–ø–ª–∞—Ç–æ–π —Ö–æ—Å–∏—Ç–∏–Ω–≥–∞ –∏–ª–∏ –∂–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ 200—Ä –∏ –º—ã –≤—ã–ª–æ–∂–∏–º –≤–∞—à —Ç–µ–∫—Å—Ç –≤ –±–æ—Ç–∞)"
        "\n\n(–ß—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ)"
        "\n\n–ö–∞—Ä—Ç–∞ - ``"
        "\n\nTRC20 - `-`",
        parse_mode='Markdown',
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data == "projects")
def handle_projects_button(callback):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('üîú –°–∫–æ—Ä–æ', callback_data=' ')
    btn3 = types.InlineKeyboardButton('üîú –°–∫–æ—Ä–æ', callback_data=' ')
    back = types.InlineKeyboardButton("üîô –Ω–∞–∑–∞–¥", callback_data="info")
    markup.row(btn1)
    markup.row(btn3)
    markup.row(back)           
    bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id,
                            text=f'üòã –ù–∞—à–∏ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–µ–∫—Ç—ã', reply_markup=markup) 


@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    print(Fore.CYAN+f"–ü—Ä–∏—à–ª–∞ call.data - {call.data}")
    if call.data == 'zvonki':
        markup = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")
        markup.add(back)
        bot.edit_message_text(chat_id=call.message.chat.id,
                              text="üîî –ó–≤–æ–Ω–∫–∏:\n–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:\n"
                                   "—Ä–∞–∑–≥–æ–≤–æ—Ä—ã –æ –≤–∞–∂–Ω–æ–º: 8:30-9:15\n"
                                   "1 –ø–∞—Ä–∞: 9:20-10:05 10:10-10:50\n"
                                   "2 –ø–∞—Ä–∞: 11-15-12:00; 12:05-12:50\n"
                                   "3 –ø–∞—Ä–∞: 13:20-14:05; 14:10-14:55\n"
                                   "4 –ø–∞—Ä–∞: 15:15-16:00; 16:05-16:50\n\n"
                                   "–û—Å—Ç–∞–ª—å–Ω—ã–µ –¥–Ω–∏\n"
                                   "1 –ø–∞—Ä–∞: 8:30-9:15; 9:20-10:05\n"
                                   "2 –ø–∞—Ä–∞: 10:25-11:10; 11:15-12:00\n"
                                   "3 –ø–∞—Ä–∞: 12:30-13:15; 13:20-14:05\n"
                                   "4 –ø–∞—Ä–∞: 14:25-15:10; 15:15-16:00\n", message_id=call.message.id,
                              reply_markup=markup)


    elif call.data == 'Korp':
        ban_user = admin.get_banned_users()
        if call.message.chat.id not in ban_user:
            ban_user = admin.get_banned_users()
            markup = types.InlineKeyboardMarkup()
            back = types.InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")
            Nov = types.InlineKeyboardButton(text="üè´ –ù–æ–≤–æ—Ä—è–∑–∞–Ω—Å–∫–∞—è", callback_data="nov")
            Dub = types.InlineKeyboardButton(text="üè¢ –î—É–±–∏–Ω–∏–Ω—Å–∫–∞—è", callback_data="dub")
            Sad = types.InlineKeyboardButton(text="üè¨ –°–∞–¥–æ–≤–Ω–∏—á–µ—Å–∫–∞—è", callback_data="sad")
            markup.row(Nov)
            markup.row(Dub)
            markup.row(Sad)
            markup.add(back)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                                text=f'–î–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚¨áÔ∏è', reply_markup=markup)
        else:
            bot.send_message(chat_id=callback.message.chat.id, text="üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã!")


    elif call.data == 'dub':
        markup = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="Korp")
        ipo = types.InlineKeyboardButton(text="üíª –ò–ü–û", callback_data="Dipo")
        gdo = types.InlineKeyboardButton(text="üíª –ì–î–û", callback_data="gdo")
        tdo = types.InlineKeyboardButton(text="üõí –¢–î–û", callback_data="tdo")
        to = types.InlineKeyboardButton(text="‚ô•Ô∏è –¢–û", callback_data="to")
        gds = types.InlineKeyboardButton(text="üíª –ì–î–°", callback_data="gds")
        ips = types.InlineKeyboardButton(text="‚ô•Ô∏è –ò–ü–°", callback_data="ips")
        sko = types.InlineKeyboardButton(text="üíª –°–ö–û", callback_data="Dsko")
        markup.row(ipo, gdo, tdo)
        markup.row(to, gds, ips, sko)
        markup.add(back)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                              text=f'‚úÖ –û—Ç–ª–∏—á–Ω–æ, –≤—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ—Ä–ø—É—Å –Ω–∞ –î—É–±–∏–Ω–∏–Ω—Å–∫–æ–π\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
                              reply_markup=markup)


    elif call.data == 'nov':
        markup = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="Korp")
        ipo = types.InlineKeyboardButton(text="üíª –ò–ü–û", callback_data="Nipo")
        msho = types.InlineKeyboardButton(text="‚ô•Ô∏è –ú–®–û", callback_data="msho")
        ksho = types.InlineKeyboardButton(text="‚ô•Ô∏è –ö–®–û", callback_data="ksho")
        do = types.InlineKeyboardButton(text="‚ô•Ô∏è –î–û", callback_data="do")
        mfo = types.InlineKeyboardButton(text="‚ô•Ô∏è –ú–§–û", callback_data="mfo")
        kshs = types.InlineKeyboardButton(text="‚ô•Ô∏è –ö–®–°", callback_data="kshs")
        sko = types.InlineKeyboardButton(text="üíª –°–ö–û", callback_data="Nsko")
        ds = types.InlineKeyboardButton(text="‚ô•Ô∏è –î–°", callback_data="ds")
        pro = types.InlineKeyboardButton(text="‚ô•Ô∏è –ü–†–û", callback_data="Npro")
        markup.row(ipo, msho, ksho)
        markup.row(do, mfo, kshs)
        markup.row(sko, ds, pro)
        markup.add(back)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                              text=f'‚úÖ –û—Ç–ª–∏—á–Ω–æ, –≤—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ—Ä–ø—É—Å –Ω–∞ –ù–æ–≤–æ—Ä—è–∑–∞–Ω—Å–∫–æ–π\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
                              reply_markup=markup)
        

    elif call.data == 'sad':
        markup = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="Korp")
        ipo = types.InlineKeyboardButton(text="üíª –ò–ü–û", callback_data="Sipo")
        m = types.InlineKeyboardButton(text="üíª –ú", callback_data="m")
        gdo = types.InlineKeyboardButton(text="üõí –ì–î–û", callback_data="Sgdo")
        sko = types.InlineKeyboardButton(text="üíª –°–ö–û", callback_data="Ssko")
        markup.row(ipo, m, gdo, sko)
        markup.add(back)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                              text=f'‚úÖ –û—Ç–ª–∏—á–Ω–æ, –≤—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ—Ä–ø—É—Å –Ω–∞ –°–∞–¥–æ–≤–Ω–∏—á–µ—Å–∫–æ–π\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
                              reply_markup=markup)
    
    elif call.data.startswith("add_user_in_group"):
        group_name = call.data.replace("add_user_in_group_", "")
        user_id = call.message.chat.id
        
        connection = mysql.connector.connect(
            host=host,
            user=user,
            password=password,
            database=db_name
        )
        cursor = connection.cursor()
        
        try:
            cursor.execute("SELECT student_ids FROM `groups` WHERE group_code = %s", (group_name,))
            result = cursor.fetchone()
            
            if result:
                current_ids = result[0].split(',') if result[0] else []
                if str(user_id) not in current_ids:
                    current_ids.append(str(user_id))
                new_ids = ','.join(current_ids)
                cursor.execute("UPDATE `groups` SET student_ids = %s WHERE group_code = %s", 
                            (new_ids, group_name))
            else:
                cursor.execute("INSERT INTO `groups` (group_code, student_ids) VALUES (%s, %s)", 
                            (group_name, str(user_id)))
            
            cursor.execute("""
            INSERT INTO user_groups (user_id, group_code)
            VALUES (%s, %s)
            ON DUPLICATE KEY UPDATE group_code = %s
            """, (user_id, group_name, group_name))
            
            connection.commit()
                        
            group_code = group_name
            if group_code.endswith("d"):
                group_key = group_code[:-5]
            else:
                group_key = group_code[:-4]
            group_rus = admin_groups.all_groups[group_key]["subgroups"][group_code]
            
            fake_message = SimpleNamespace(from_user=SimpleNamespace(id=user_id))
            is_admin_flag = admin.is_admin(fake_message)
            keyboard = get_keyboard_with_days(is_admin = is_admin_flag, day = True)

            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.id)

            bot.send_message(
                chat_id=call.message.chat.id,
                text=f'‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ì—Ä—É–ø–ø–∞ {group_rus} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∫ –≤–∞—à–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞',
                reply_markup=keyboard
            )
            
        finally:
            cursor.close()
            connection.close()


    elif call.data in get_group("dub"):
        campus.handle_campus_callbacks(call, bot, "dub")
    elif call.data in get_group("nov"):
        campus.handle_campus_callbacks(call, bot, "nov")
    elif call.data in get_group("sad"):
        campus.handle_campus_callbacks(call, bot, "sad")
    elif any(x in call.data.split('_')[0] for x in ['Dipo', 'gdo', 'tdo', 'Dsko', 'msho', 'to', 'gds', 'ips']):
        campus.handle_campus_callbacks(call, bot, "dub")       
    elif any(x in call.data.split('_')[0] for x in ['Nipo', 'Npro', 'ds', 'Nsko', 'kshs', 'mfo', 'do', 'ksho', 'msho']):
        campus.handle_campus_callbacks(call, bot, "nov")
    elif any(x in call.data.split('_')[0] for x in ['Sipo', 'Sgdo', 'Ssko', 'm', 'ds']):
        campus.handle_campus_callbacks(call, bot, "dub")


               
@bot.message_handler(content_types=['text'])
def handle_text(message):
    print(Fore.CYAN+f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
    if message.text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        print(Fore.CYAN+"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        ban_user = admin.get_banned_users()
        if message.chat.id not in ban_user:
            markup = types.InlineKeyboardMarkup()
            btn1 = types.InlineKeyboardButton('üè£ –í—ã–±—Ä–∞—Ç—å –∫–æ—Ä–ø—É—Å', callback_data='Korp')
            btn3 = types.InlineKeyboardButton('üîî –ó–≤–æ–Ω–∫–∏', callback_data='zvonki')
            info = types.InlineKeyboardButton("üìÅ–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data = "info")
            markup.row(btn1, btn3)
            markup.row(info)
            
            if admin.is_admin(message):
                adm = types.InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admpan")        
                markup.add(adm)
                
            bot.send_message(
                message.chat.id,
                text = hello_random()+"—Å–Ω–æ–≤–∞ "+message.from_user.first_name+".\n\n"+text_random(),
                reply_markup=markup
            )
        else:
            bot.send_message(message.chat.id, "üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã!")

    elif message.text == 'üè£ –í—Å–µ –∫–æ—Ä–ø—É—Å—ã':
        ban_user = admin.get_banned_users()
        print(Fore.CYAN+"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
        if message.chat.id not in ban_user:
            ban_user = admin.get_banned_users()
            markup = types.InlineKeyboardMarkup()
            back = types.InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")
            Nov = types.InlineKeyboardButton(text="üè´ –ù–æ–≤–æ—Ä—è–∑–∞–Ω—Å–∫–∞—è", callback_data="nov")
            Dub = types.InlineKeyboardButton(text="üè¢ –î—É–±–∏–Ω–∏–Ω—Å–∫–∞—è", callback_data="dub")
            Sad = types.InlineKeyboardButton(text="üè¨ –°–∞–¥–æ–≤–Ω–∏—á–µ—Å–∫–∞—è", callback_data="sad")
            markup.row(Nov)
            markup.row(Dub)
            markup.row(Sad)
            markup.add(back)
            bot.send_message(message.chat.id, text = '–î–ª—è –≤—ã–±–æ—Ä–∞ –≤—ã–±–µ—Ä–∏ –∫–æ—Ä–ø—É—Å ‚¨áÔ∏è', reply_markup=markup)
        else:
            bot.send_message(message.chat.id, text = "üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã!")


    elif message.text == '‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å':
        if admin.is_admin(message):
            markup = types.InlineKeyboardMarkup()
            add = types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ê–¥–º–∏–Ω–∞", callback_data="add_admin")       
            remove = types.InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –ê–¥–º–∏–Ω–∞", callback_data="remove_admin") 
            spam = types.InlineKeyboardButton("üí¨ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="send_spam") 
            users = types.InlineKeyboardButton("üë• –ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", callback_data="users") 
            back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")
            log = types.InlineKeyboardButton("üóí –õ–æ–≥–∏", callback_data="log")
            ban = types.InlineKeyboardButton("üö´ –±–∞–Ω—ã", callback_data="ban_menu")
            markup.row(add, remove)
            markup.add(spam, log)
            markup.add(users, ban)
            markup.add(back)
            bot.send_message(message.chat.id, text=f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ –∞–¥–º–∏–Ω, {message.from_user.first_name} !\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    elif message.text == 'üóìÔ∏è –ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':  
        ban_user = admin.get_banned_users()
        if message.chat.id not in ban_user:
            has_group, group = admin.check_user_group(message.chat.id)
            print(has_group, group)
            if has_group:
                if group in get_group("nov"):
                    subgroup_key = group
                    campus = "nov"
                elif group in get_group("dub"):
                    subgroup_key = group
                    campus = "dub"
                elif group in get_group("sad"):
                    subgroup_key = group
                    campus = "sad"

                markup = create_week_keyboard(subgroup_key, message)
                groups = import_group(campus)
                for group_data in groups:
                    if subgroup_key in groups[group_data]["subgroups"]:
                        group_name = groups[group_data]["subgroups"][subgroup_key]
                        break

                bot.send_message(
                    chat_id=message.chat.id,
                    text=f'‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É {group_name}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–µ–¥–µ–ª–∏:\n(–°–µ–π—á–∞—Å {week_type()} –Ω–µ–¥–µ–ª—è)',
                    reply_markup=markup
                )
                
            else:
                msg = bot.send_message(message.chat.id, text=f"‚ÄºÔ∏è –í—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É!\n\n‚úíÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —á–∞—Å—Ç—å –∏–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å –≤–∞—à—É –≥—Ä—É–ø–ø—É\n\n–ü—Ä–∏–º–µ—Ä—ã:\n–ò–ü–û\n–ò–ü–û-31.22\n–ò–ü–û-31")
                bot.register_next_step_handler(msg, add_my_group)
        else:
            bot.send_message(message.chat.id, text = "üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã!")
    
    elif message.text in ["üìÖ –°–µ–≥–æ–¥–Ω—è", "üìÖ –ó–∞–≤—Ç—Ä–∞"]:
        ban_user = admin.get_banned_users()
        if message.chat.id not in ban_user:
            markup = types.InlineKeyboardMarkup()
            
            day_codes = {
                0: "mon",
                1: "tue", 
                2: "wed",
                3: "thu",
                4: "fri",
                5: False,
                6: False
            }

            _, group = admin.check_user_group(message.chat.id)
            if group in get_group("nov"):
                subgroup_key = group
                campus = "nov"
            elif group in get_group("dub"):
                subgroup_key = group
                campus = "dub"
            elif group in get_group("sad"):
                subgroup_key = group
                campus = "sad"

            today = datetime.now()
            weekday = today.weekday()
            tomorrow = (weekday + 1) % 7
            today = datetime.today()
            week_number = today.isocalendar()[1]
            week_suffix = "nechet" if week_number % 2 == 0 else "chet"
            
            if message.text == "üìÖ –°–µ–≥–æ–¥–Ω—è":
                current_day = day_codes[weekday]
            else:
                current_day = day_codes[tomorrow]
                
            if current_day:
                if tomorrow == 0:
                    if week_suffix == "nechet":
                        week_suffix = "chet"
                    else:
                        week_suffix = "nechet"
                        
                schedule_text = get_schedule(week_suffix, current_day, group, campus)
                
                days_order = {'mon': 0, 'tue': 1, 'wed': 2, 'thu': 3, 'fri': 4}
                days_list = ['mon', 'tue', 'wed', 'thu', 'fri']
                
                if week_suffix == "nechet":
                    reweek_suffix = "chet"
                else:
                    reweek_suffix = "nechet"
                nav_row = []
                
                if days_order[current_day] > 0:
                    prev_day = days_list[days_order[current_day] - 1]
                    prev_btn = types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"{group}_{week_suffix}_{prev_day}")
                    nav_row.append(prev_btn)
                if days_order[current_day] == 0:
                    next_btn = types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"{group}_{reweek_suffix}_fri")
                    nav_row.append(next_btn)
                            
                if days_order[current_day] < 4:
                    next_day = days_list[days_order[current_day] + 1]
                    next_btn = types.InlineKeyboardButton("‚û°Ô∏è", callback_data=f"{group}_{week_suffix}_{next_day}")
                    nav_row.append(next_btn)
                if days_order[current_day] == 4:
                    next_btn = types.InlineKeyboardButton("‚û°Ô∏è", callback_data=f"{group}_{reweek_suffix}_mon")
                    nav_row.append(next_btn)

                if nav_row:
                    markup.row(*nav_row)
            else:
                schedule_text = "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —É –≤–∞—Å –≤—ã—Ö–æ–¥–Ω–æ–π"
                back = types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f"start")
                markup.add(back)


            bot.send_message(message.chat.id, text = schedule_text, reply_markup=markup)

    try:
        admin_id = int(message.text)
        with mysql.connector.connect(
            host=host,
            user=user,
            password=password,
            database=db_name
        ) as conn:
            with conn.cursor(buffered=True) as cur:
                cur.execute("SELECT group_code FROM group_admins WHERE waiting_admin = TRUE")
                result = cur.fetchone()
                if result:
                    pass
    except ValueError:
        pass

         

while True:
    try:
        bot.polling(none_stop=True, 
                   timeout=60,
                   long_polling_timeout=60,
                   interval=3)
    except (requests.exceptions.ConnectionError, 
            ProtocolError,
            TimeoutError) as e:
        print(Fore.YELLOW + "–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä–∞–º Telegram...")
        time.sleep(15)
        continue
    except Exception as e:
        print(Fore.RED + f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
        time.sleep(15)
        continue
