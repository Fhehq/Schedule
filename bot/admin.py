from datetime import datetime
from random import choice as c


from telebot import types
import pymysql
import mysql
from colorama import init, Fore


from config import *


init(autoreset=True)

def check_user_group(user_id) -> bool | str:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–±–∞–≤–∏–ª –ª–∏ —á–µ–ª–æ–≤–µ–∫ –≥—Ä—É–ø–ø—É"""
    connection = mysql.connector.connect(
        host=host,
        user=user, 
        password=password,
        database=db_name
    )
    cursor = connection.cursor()
    
    cursor.execute("SELECT group_code FROM user_groups WHERE user_id = %s", (user_id,))
    result = cursor.fetchone()
    
    cursor.close()
    connection.close()

    if result:
        group_code = result[0]
        return True, group_code
    return False, None

def save_users(message):
    """–ó–∞–Ω–µ—Å–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —é–∑–µ—Ä–æ–≤ –≤ –ë–î"""
    try:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"{timestamp} - –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} {message.from_user.first_name}\n"
        
        with open('log.txt', 'a', encoding='utf-8') as f:
            f.write(log_entry)

        connection = pymysql.connect(
            host=host,
            user=user,
            password=password,
            database=db_name,
            cursorclass=pymysql.cursors.DictCursor
        )
        with connection.cursor() as cursor:
            cursor.execute(
                "INSERT IGNORE INTO users (user_id, user_name) VALUES (%s, %s)", 
                (message.from_user.id, message.from_user.username)
            )
        connection.commit()
    except Exception as ex:
        print(Fore.RED+f"‚ÄºÔ∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {ex} ‚ÄºÔ∏è")
    finally:
        if 'connection' in locals():
            connection.close()

def get_users() -> set[int]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —é–∑–µ—Ä–æ–≤"""
    try:
        connection = pymysql.connect(
            host=host,
            user=user, 
            password=password,
            database=db_name,
            cursorclass=pymysql.cursors.DictCursor
        )
        with connection.cursor() as cursor:
            cursor.execute("SELECT user_id FROM users")
            result = cursor.fetchall()
            return {row['user_id'] for row in result}
    except Exception as ex:
        print(Fore.RED+f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {ex}")
        return set()
    finally:
        if 'connection' in locals():
            connection.close()
            
     
def handle_ban_menu(callback):
    """–ú–µ–Ω—é –±–∞–Ω–∞"""
    if is_admin(callback):
        markup = types.InlineKeyboardMarkup()
        ban_user = types.InlineKeyboardButton("üî® –ó–∞–±–∞–Ω–∏—Ç—å", callback_data="ban_user")
        unban_user = types.InlineKeyboardButton("üîì –†–∞–∑–±–∞–Ω–∏—Ç—å", callback_data="unban_user") 
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admpan")
        markup.add(ban_user, unban_user)
        markup.add(back)
        
        bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=markup
        )
    else:
        markup = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")
        markup.add(back)
        bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.id,
            text="üîí–£ –≤–∞—Å –Ω–µ—Ç—É –¥–æ—Å—Ç—É–ø–∞\n\n–ï—Å–ª–∏ –≤—ã –∞–¥–º–∏–Ω –∫–∞–∫–æ–π —Ç–æ –ª–∏–±–æ –≥—Ä—É–ø–ø—ã, —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —á–µ—Ä–µ–∑ –≤–∞—à—É –≥—Ä—É–ø–ø—É.",
            reply_markup=markup
        )

def handle_ban_user(callback):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —é–∑–µ—Ä–∞"""
    if is_admin(callback):
        msg = bot.send_message(callback.message.chat.id, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞:")
        bot.register_next_step_handler(msg, process_ban_user)
    else:
        markup = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")
        markup.add(back)
        bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.id,
            text="üîí–£ –≤–∞—Å –Ω–µ—Ç—É –¥–æ—Å—Ç—É–ø–∞\n\n–ï—Å–ª–∏ –≤—ã –∞–¥–º–∏–Ω –∫–∞–∫–æ–π —Ç–æ –ª–∏–±–æ –≥—Ä—É–ø–ø—ã, —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —á–µ—Ä–µ–∑ –≤–∞—à—É –≥—Ä—É–ø–ø—É.",
            reply_markup=markup
        )
def process_ban_user(message):
    """–í–≤–æ–¥ ID –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
    try:
        user_id = int(message.text)
        if user_id in get_admins():
            text = "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–¥–º–∏–Ω–∞"
        else:
            connection = pymysql.connect(
                host=host,
                user=user,
                password=password,
                database=db_name,
                cursorclass=pymysql.cursors.DictCursor
            )
            with connection.cursor() as cursor:
                cursor.execute("INSERT INTO ban_users (user_id) VALUES (%s)", (user_id,))
            connection.commit()


            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            log_entry = f"{timestamp} - –∑–∞–±–∞–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} - –∑–∞–±–∞–Ω–∏–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} {message.from_user.first_name}\n"
            
            with open('log.txt', 'a', encoding='utf-8') as f:
                f.write(log_entry)
                
            text = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω"
            
        markup = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admpan")
        markup.add(back)
        bot.send_message(message.chat.id, text, reply_markup=markup)
        
    except ValueError:
        markup = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admpan")
        markup.add(back)
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º", reply_markup=markup)

def handle_unban_user(callback):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–±–∞–Ω–∞ —é–∑–µ—Ä–∞"""
    if is_admin(callback):
        msg = bot.send_message(callback.message.chat.id, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞:")
        bot.register_next_step_handler(msg, process_unban_user)
    else:
        markup = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")
        markup.add(back)
        bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.id,
            text="üîí–£ –≤–∞—Å –Ω–µ—Ç—É –¥–æ—Å—Ç—É–ø–∞\n\n–ï—Å–ª–∏ –≤—ã –∞–¥–º–∏–Ω –∫–∞–∫–æ–π —Ç–æ –ª–∏–±–æ –≥—Ä—É–ø–ø—ã, —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —á–µ—Ä–µ–∑ –≤–∞—à—É –≥—Ä—É–ø–ø—É.",
            reply_markup=markup
        )


def process_unban_user(message):
    """–í–≤–æ–¥ ID –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞"""
    try:
        user_id = int(message.text)
        connection = pymysql.connect(
            host=host,
            user=user,
            password=password,
            database=db_name,
            cursorclass=pymysql.cursors.DictCursor
        )
        with connection.cursor() as cursor:
            cursor.execute("DELETE FROM ban_users WHERE user_id = %s", (user_id,))
        connection.commit()
        
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"{timestamp} - —Ä–∞–∑–±–∞–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} - —Ä–∞–∑–±–∞–Ω–∏–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} {message.from_user.first_name}\n"
        
        with open('log.txt', 'a', encoding='utf-8') as f:
            f.write(log_entry)
            
        markup = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admpan")
        markup.add(back)
        bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–∞–Ω–µ–Ω", reply_markup=markup)
        
    except ValueError:
        markup = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admpan")
        markup.add(back)
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º", reply_markup=markup)


def get_banned_users() -> set:
    """–ü–æ–ª—É—á–Ω–∏–µ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö —é–∑–µ—Ä–æ–≤"""
    try:
        connection = pymysql.connect(
            host=host,
            user=user,
            password=password,
            database=db_name,
            cursorclass=pymysql.cursors.DictCursor
        )
        with connection.cursor() as cursor:
            cursor.execute("SELECT user_id FROM ban_users")
            result = cursor.fetchall()
            return {row['user_id'] for row in result}
    except Exception as ex:
        print(Fore.RED+f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {ex}")
        return set()
    finally:
        if 'connection' in locals():
            connection.close()
   

def get_admins() -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤"""
    try:
        connection = pymysql.connect(
            host=host,
            user=user,
            password=password, 
            database=db_name,
            cursorclass=pymysql.cursors.DictCursor
        )
        with connection.cursor() as cursor:
            cursor.execute("SELECT admin_id FROM admins")
            result = cursor.fetchall()
            return [row['admin_id'] for row in result]
    except Exception as ex:
        print(Fore.RED+f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤: {ex}")
        return []
    finally:
        if 'connection' in locals():
            connection.close()


def save_admins(admin_ids, message):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞"""
    try:
        connection = pymysql.connect(
            host=host,
            user=user,
            password=password,
            database=db_name,
            cursorclass=pymysql.cursors.DictCursor
        )
        with connection.cursor() as cursor:
            cursor.execute("TRUNCATE TABLE admins")
            for admin_id in admin_ids:
                cursor.execute("INSERT INTO admins (admin_id, username) VALUES (%s, %s)", 
                            (admin_id, message.from_user.username))

        connection.commit()
    except Exception as ex:
        print(Fore.RED+f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤: {ex}")
    finally:
        if 'connection' in locals():
            connection.close()


def is_admin(message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞"""
    admin_ids = get_admins()
    return message.from_user.id in admin_ids


def handle_log(callback):
    """–ú–µ–Ω—é –ª–æ–≥–æ–≤"""
    if is_admin(callback):
        markup = types.InlineKeyboardMarkup()
        check_log = types.InlineKeyboardButton("üóí –ø–æ—Å–º–æ—Ç–µ—Ä—Ç—å –ª–æ–≥–∏", callback_data="showlog")
        delete_log = types.InlineKeyboardButton("üóë —É–¥–∞–ª–∏—Ç—å –ª–æ–≥–∏", callback_data="delete_log")
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admpan")
        markup.add(check_log)
        markup.add(delete_log)
        markup.add(back)
        try:
            if callback.message and callback.message.text:
                bot.edit_message_text("üòã –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ", 
                                    callback.message.chat.id, 
                                    callback.message.message_id, 
                                    reply_markup=markup)
            else:
                bot.send_message(callback.message.chat.id, 
                            "üòã –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ", 
                            reply_markup=markup)
        except Exception as e:
            bot.send_message(callback.message.chat.id, 
                            "üòã –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ", 
                            reply_markup=markup)

    else:
        markup = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")
        markup.add(back)
        bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.id,
            text="üîí–£ –≤–∞—Å –Ω–µ—Ç—É –¥–æ—Å—Ç—É–ø–∞\n\n–ï—Å–ª–∏ –≤—ã –∞–¥–º–∏–Ω –∫–∞–∫–æ–π —Ç–æ –ª–∏–±–æ –≥—Ä—É–ø–ø—ã, —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —á–µ—Ä–µ–∑ –≤–∞—à—É –≥—Ä—É–ø–ø—É.",
            reply_markup=markup
        )
        

def handle_show_log(callback):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤ –≤ —á–∞—Ç"""
    if is_admin(callback) and callback.data == "showlog":
        try:
            if os.path.exists('log.txt') and os.path.getsize('log.txt') > 0:
                with open('log.txt', 'rb', encoding="UTF-8") as f:
                    markup = types.InlineKeyboardMarkup()
                    back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="log")
                    markup.add(back)
                    
                    bot.send_document(callback.message.chat.id,
                                    document=f,
                                    caption="üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–æ–≥–æ–≤",
                                    reply_markup=markup)
            else:
                markup = types.InlineKeyboardMarkup()
                back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="log")
                markup.add(back)
                
                bot.send_message(callback.message.chat.id,
                               "üìù –õ–æ–≥–∏ –ø—É—Å—Ç—ã",
                               reply_markup=markup)
                               
        except Exception as e:
            markup = types.InlineKeyboardMarkup()
            back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="showlog")
            markup.add(back)
            
            bot.send_message(callback.message.chat.id,
                           "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–æ–≤",
                           reply_markup=markup)



    else:
        markup = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")
        markup.add(back)
        bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.id,
            text="üîí–£ –≤–∞—Å –Ω–µ—Ç—É –¥–æ—Å—Ç—É–ø–∞\n\n–ï—Å–ª–∏ –≤—ã –∞–¥–º–∏–Ω –∫–∞–∫–æ–π —Ç–æ –ª–∏–±–æ –≥—Ä—É–ø–ø—ã, —Ç–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —á–µ—Ä–µ–∑ –≤–∞—à—É –≥—Ä—É–ø–ø—É", reply_markup=markup)
    
    
def handle_delete_log(callback):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ª–æ–≥–æ–≤"""
    if is_admin(callback):
        markup = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admpan")
        yes = types.InlineKeyboardButton("‚úÖ –î–∞", callback_data="delete_log_yes")
        markup.add(yes)
        markup.add(back)
        bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.id,
            text="–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ª–æ–≥–∏?",
            reply_markup=markup
        )
    else:
        markup = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")
        markup.add(back)
        bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.id,
            text="üîí–£ –≤–∞—Å –Ω–µ—Ç—É –¥–æ—Å—Ç—É–ø–∞\n\n–ï—Å–ª–∏ –≤—ã –∞–¥–º–∏–Ω –∫–∞–∫–æ–π —Ç–æ –ª–∏–±–æ –≥—Ä—É–ø–ø—ã, —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —á–µ—Ä–µ–∑ –≤–∞—à—É –≥—Ä—É–ø–ø—É.",
            reply_markup=markup
        )


def handle_log_delete_yes(callback):
    """–ü–æ–¥—Ç–≤—Ä–µ–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ –ª–æ–≥–æ–≤"""
    if is_admin(callback):
        letter = "QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm1234567890"
        kapcha = "".join([c(letter) for _ in range(5)])
 

        markup = types.InlineKeyboardMarkup()
        cancel = types.InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admpan")
        markup.add(cancel)
        
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
        
        msg = bot.send_message(callback.message.chat.id,
                             f"–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–≥–æ–≤ –≤–≤–µ–¥–∏—Ç–µ –∫–∞–ø—á—É: {kapcha}")
        
        def check_captcha(message):
            try:
                if message.text == kapcha:
                    with open('log.txt', 'w', encoding='utf-8') as f:
                        f.write('')
                    bot.send_message(message.chat.id, "‚úÖ –õ–æ–≥–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã", reply_markup=markup)
                else:
                    bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞–ø—á–∞", reply_markup=markup)
            except:
                bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–æ–≥–æ–≤", reply_markup=markup)
                
        bot.register_next_step_handler(msg, check_captcha)
    else:
        markup = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")
        markup.add(back)
        bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.id,
            text="üîí–£ –≤–∞—Å –Ω–µ—Ç—É –¥–æ—Å—Ç—É–ø–∞\n\n–ï—Å–ª–∏ –≤—ã –∞–¥–º–∏–Ω –∫–∞–∫–æ–π —Ç–æ –ª–∏–±–æ –≥—Ä—É–ø–ø—ã, —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —á–µ—Ä–µ–∑ –≤–∞—à—É –≥—Ä—É–ø–ø—É.",
            reply_markup=markup
        )            
          
  
def handle_admin_panel(callback):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    if is_admin(callback):
        markup = types.InlineKeyboardMarkup()
        add = types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ê–¥–º–∏–Ω–∞", callback_data="add_admin")
        remove = types.InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –ê–¥–º–∏–Ω–∞", callback_data="remove_admin")
        spam = types.InlineKeyboardButton("üí¨ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="send_spam")
        users = types.InlineKeyboardButton("üë• –ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", callback_data="users")
        change_zvonki = types.InlineKeyboardButton("üîî –ò–∑–º–µ–Ω–∏—Ç—å –∑–≤–æ–Ω–∫–∏", callback_data="change_zvonki")
        log = types.InlineKeyboardButton("üóí –õ–æ–≥–∏", callback_data="log")
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")
        
        markup.row(add, remove)
        markup.add(spam, users)
        markup.add(change_zvonki)
        markup.add(log)
        markup.add(back)
        
        bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.id,
            text=f"ü´° –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, {callback.from_user.first_name}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=markup
        )
    else:
        markup = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")
        markup.add(back)
        bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.id,
            text="üîí–£ –≤–∞—Å –Ω–µ—Ç—É –¥–æ—Å—Ç—É–ø–∞\n\n–ï—Å–ª–∏ –≤—ã –∞–¥–º–∏–Ω –∫–∞–∫–æ–π —Ç–æ –ª–∏–±–æ –≥—Ä—É–ø–ø—ã, —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —á–µ—Ä–µ–∑ –≤–∞—à—É –≥—Ä—É–ø–ø—É.",
            reply_markup=markup
        )


def handle_spam(callback):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if is_admin(callback):
        global is_spam_cancelled
        is_spam_cancelled = False
        markup = types.InlineKeyboardMarkup()
        cancel_button = types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="cancel_spam")
        markup.add(cancel_button)
        msg = bot.send_message(callback.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=markup)
        bot.register_next_step_handler(msg, ask_add_admin_button)
    else:
        markup = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")
        markup.add(back)
        bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.id,
            text="üîí–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞\n\n–ï—Å–ª–∏ –≤—ã –∞–¥–º–∏–Ω –∫–∞–∫–æ–π-–ª–∏–±–æ –≥—Ä—É–ø–ø—ã, —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —á–µ—Ä–µ–∑ –≤–∞—à—É –≥—Ä—É–ø–ø—É.",
            reply_markup=markup
        )


def ask_add_admin_button(message):
    """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω—É–∂–Ω–∞ –ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞"""
    global spam_text
    spam_text = message.text

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚úÖ –î–∞", callback_data="add_btn_yes"))
    markup.add(types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="add_btn_no"))

    bot.send_message(message.chat.id, "–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∞–¥–º–∏–Ω–∞?", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data in ["add_btn_yes", "add_btn_no"])
def process_add_admin_button_choice(call):
    if call.data == "add_btn_yes":
        process_spam_text(call.message, add_admin_button=True)
    else:
        process_spam_text(call.message, add_admin_button=False)


def process_spam_text(message, add_admin_button=False):
    """–í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –µ–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è"""
    global is_spam_cancelled, spam_text

    reply_markup = None
    if add_admin_button:
        reply_markup = types.InlineKeyboardMarkup()
        reply_markup.add(types.InlineKeyboardButton("–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º", url=""))

    if spam_text:
        users = get_users()
        for user_id in users:
            if is_spam_cancelled:
                markup = types.InlineKeyboardMarkup()
                admmen = types.InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω –ú–µ–Ω—é", callback_data="admpan")
                markup.add(admmen)
                bot.send_message(message.chat.id, "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=markup)
                break
            try:
                bot.send_message(user_id, spam_text, reply_markup=reply_markup)
            except Exception as e:
                print(Fore.RED + f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        else:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            log_entry = f"{timestamp} - –∑–∞–ø—É—â–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ - {message.chat.id}\n"

            with open('log.txt', 'a', encoding='utf-8') as f:
                f.write(log_entry)

            if not is_spam_cancelled:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admpan"))
                bot.send_message(message.chat.id, "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "‚ÄºÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. ‚ÄºÔ∏è")

def cancel_spam(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if is_admin(call):
        global is_spam_cancelled
        is_spam_cancelled = True
        markup = types.InlineKeyboardMarkup()
        admmen = types.InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω –ú–µ–Ω—é", callback_data="admpan")
        markup.add(admmen)
        bot.send_message(call.message.chat.id, "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=markup)
    else:
        markup = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")
        markup.add(back)
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.id,
            text="üîí–£ –≤–∞—Å –Ω–µ—Ç—É –¥–æ—Å—Ç—É–ø–∞\n\n–ï—Å–ª–∏ –≤—ã –∞–¥–º–∏–Ω –∫–∞–∫–æ–π —Ç–æ –ª–∏–±–æ –≥—Ä—É–ø–ø—ã, —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —á–µ—Ä–µ–∑ –≤–∞—à—É –≥—Ä—É–ø–ø—É.",
            reply_markup=markup
        )
        
        
def handle_users(callback):
    """–ü–æ–ª—É—á–Ω–∏–µ –∫–æ–ª-–≤–æ —é–∑–µ—Ä–æ–≤"""
    if is_admin(callback):
        len_user = len(get_users())
        markup = types.InlineKeyboardMarkup()
        user_id = types.InlineKeyboardButton("üôãüèª –ò—Ö id/name", callback_data="user_id")
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admpan")
        markup.add(user_id)
        markup.add(back)
        bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.id,
            text=f"üë£ –ö–æ–ª–∏—á–µ—Ç—Å–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:{len_user}\n",
            reply_markup=markup
        )
    else:
        markup = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")
        markup.add(back)
        bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.id,
            text="üîí –£ –≤–∞—Å –Ω–µ—Ç—É –¥–æ—Å—Ç—É–ø–∞\n\n–ï—Å–ª–∏ –≤—ã –∞–¥–º–∏–Ω –∫–∞–∫–æ–π —Ç–æ –ª–∏–±–æ –≥—Ä—É–ø–ø—ã, —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —á–µ—Ä–µ–∑ –≤–∞—à—É –≥—Ä—É–ø–ø—É.",
            reply_markup=markup
        )


def handle_user_id(callback):
    if is_admin(callback):
        id_name = [user for user in get_users()]
        markup = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="users")
        markup.add(back)
        bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.id,
            text=f"{id_name}",
            reply_markup=markup
        )
    else:
        markup = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")
        markup.add(back)
        bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.id,
            text="üîí –£ –≤–∞—Å –Ω–µ—Ç—É –¥–æ—Å—Ç—É–ø–∞\n\n–ï—Å–ª–∏ –≤—ã –∞–¥–º–∏–Ω –∫–∞–∫–æ–π —Ç–æ –ª–∏–±–æ –≥—Ä—É–ø–ø—ã, —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —á–µ—Ä–µ–∑ –≤–∞—à—É –≥—Ä—É–ø–ø—É.",
            reply_markup=markup
        )
        
        
def add_admin_handler(callback):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞"""
    if is_admin(callback):
        markup = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admpan")
        markup.add(back)
        msg = bot.send_message(callback.message.chat.id, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=markup)
        bot.register_next_step_handler(msg, process_admin_id)
    else:
        markup = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")
        markup.add(back)
        bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.id,
            text="üîí –£ –≤–∞—Å –Ω–µ—Ç—É –¥–æ—Å—Ç—É–ø–∞\n\n–ï—Å–ª–∏ –≤—ã –∞–¥–º–∏–Ω –∫–∞–∫–æ–π —Ç–æ –ª–∏–±–æ –≥—Ä—É–ø–ø—ã, —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —á–µ—Ä–µ–∑ –≤–∞—à—É –≥—Ä—É–ø–ø—É.",
            reply_markup=markup
        )


def process_admin_id(message):
    """–í–≤–æ–¥ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞"""
    try:
        new_admin_id = int(message.text)
        admin_ids = get_admins()
        
        if new_admin_id in admin_ids:
            markup = types.InlineKeyboardMarkup()
            back = types.InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω –ú–µ–Ω—é", callback_data="admpan")
            markup.add(back)
            bot.send_message(message.chat.id, "‚ÄºÔ∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. ‚ÄºÔ∏è", reply_markup=markup)
            return

        admin_ids.append(new_admin_id)
        save_admins(admin_ids)
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"{timestamp} - –¥–æ–±–∞–≤–∏–ª–∏ –∞–¥–º–∏–Ω–∞ {new_admin_id} –¥–æ–±–∞–≤–∏–ª - {message.from_user.id} {message.from_user.first_name}\n"

        with open('log.txt', 'a', encoding='utf-8') as f:
            f.write(log_entry)
        markup = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton("‚öôÔ∏è–ê–¥–º–∏–Ω –ú–µ–Ω—é", callback_data="admpan")
        markup.add(back)
        bot.send_message(message.chat.id, f"‚úÖ–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID {new_admin_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=markup)
        
        for owner_id in []:
            bot.send_message(owner_id, f"üîî {timestamp} - –¥–æ–±–∞–≤–∏–ª–∏ –∞–¥–º–∏–Ω–∞\nID: {new_admin_id}\n–î–æ–±–∞–≤–∏–ª: {message.from_user.first_name} ({message.from_user.id})")

    except ValueError:
        markup = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω –ú–µ–Ω—é", callback_data="admpan")
        markup.add(back)
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.", reply_markup=markup)
        

def remove_admin_handler(callback):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞"""
    if is_admin(callback):
        markup = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω –ú–µ–Ω—é", callback_data="admpan")
        markup.add(back)
        msg = bot.send_message(callback.message.chat.id, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:", reply_markup=markup)
        bot.register_next_step_handler(msg, process_remove_admin)
    else:
        markup = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")
        markup.add(back)
        bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.id,
            text="üîí –£ –≤–∞—Å –Ω–µ—Ç—É –¥–æ—Å—Ç—É–ø–∞\n\n–ï—Å–ª–∏ –≤—ã –∞–¥–º–∏–Ω –∫–∞–∫–æ–π —Ç–æ –ª–∏–±–æ –≥—Ä—É–ø–ø—ã, —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —á–µ—Ä–µ–∑ –≤–∞—à—É –≥—Ä—É–ø–ø—É.",
            reply_markup=markup
        )


def process_remove_admin(message):
    """–í–≤–æ–¥ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞"""
    try:
        admin_id = int(message.text)
        admin_ids = get_admins()
        if admin_id not in admin_ids:
            markup = types.InlineKeyboardMarkup()
            back = types.InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω –ú–µ–Ω—é", callback_data="admpan")
            markup.add(back)
            bot.send_message(message.chat.id, "‚ÄºÔ∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. ‚ÄºÔ∏è", reply_markup=markup)
            return
        if admin_id == "id_MainAdmin":
            markup = types.InlineKeyboardMarkup()
            back = types.InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω –ú–µ–Ω—é", callback_data="admpan")
            markup.add(back)
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=markup)
            return
        admin_ids.remove(admin_id)
        save_admins(admin_ids)
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"{timestamp} - —É–¥–∞–ª–∏–ª–∏ –∞–¥–º–∏–Ω–∞ {admin_id} —É–¥–∞–ª–∏–ª - {message.from_user.id} {message.from_user.first_name}\n"

        with open('log.txt', 'a', encoding='utf-8') as f:
            f.write(log_entry)
        for owner_id in []:
            bot.send_message(owner_id, f"{timestamp} - —É–¥–∞–ª–∏–ª–∏ –∞–¥–º–∏–Ω–∞ {admin_id} —É–¥–∞–ª–∏–ª - {message.from_user.id} {message.from_user.first_name}\n")
        markup = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω –ú–µ–Ω—é", callback_data="admpan")
        markup.add(back)
        bot.send_message(message.chat.id, f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID {admin_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", reply_markup=markup)

    except ValueError:
        markup = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω –ú–µ–Ω—é", callback_data="admpan")
        markup.add(back)
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.", reply_markup=markup)
