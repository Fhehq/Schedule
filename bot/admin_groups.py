from datetime  import datetime
import json


from colorama import init, Fore
from telebot import types
import mysql.connector
import pymysql


from config import host, user, password, db_name, bot
from bot.admin import is_admin


init(autoreset=True)

def import_group(campus) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å—Å–µ—Ö –≥—Ä—É–ø–ø"""
    with open("data/groups.json", "r", encoding="UTF-8") as file:
        data = json.load(file)
        if campus == "all":
            return {k: v for key, value in data.items() for k, v in value.items()}
        return data[campus]
        

all_groups  = import_group("all")


def get_admins() -> list[int]:
    """–ü–æ–ª—É—á–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤"""
    try:
        connection = pymysql.connect(
            host=host,
            user=user,
            password=password, 
            database=db_name,
            cursorclass=pymysql.cursors.DictCursor
        )
        with connection.cursor() as cursor:
            cursor.execute("SELECT admin_id FROM admins")
            result = cursor.fetchall()
            return [row['admin_id'] for row in result]
    except Exception as ex:
        print(Fore.CYAN+f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤: {ex}")
        return []
    finally:
        if 'connection' in locals():
            connection.close()


def save_admins(admin_ids):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞"""
    try:
        connection = pymysql.connect(
            host=host,
            user=user,
            password=password,
            database=db_name,
            cursorclass=pymysql.cursors.DictCursor
        )
        with connection.cursor() as cursor:
            cursor.execute("TRUNCATE TABLE admins")
            for admin_id in admin_ids:
                cursor.execute("INSERT INTO admins (admin_id) VALUES (%s)", (admin_id,))
        connection.commit()
    except Exception as ex:
        print(Fore.RED+f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤: {ex}")
    finally:
        if 'connection' in locals():
            connection.close()
          
            
def is_group_admin(call, group_code: str) -> bool:
    """–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–µ–ª–æ–≤–µ–∫ –∞–¥–º–∏–Ω–æ–≤ –≥—Ä—É–ø–ø—ã"""
    conn = mysql.connector.connect(
        host=host,
        user=user,
        password=password,
        database=db_name
    )
    cur = conn.cursor()
    
    query = "SELECT * FROM group_admins WHERE admin_id = %s AND group_code = %s"
    cur.execute(query, (call.from_user.id, group_code))
    result = cur.fetchone()
    
    cur.close()
    conn.close()
    
    return result is not None


def handle_admin_panel(call, bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    group_code = call.data.replace("_adm", "")
    print(Fore.CYAN+f"‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è –≥—Ä—É–ø–ø—ã {group_code}")        
    if is_group_admin(call, group_code) or is_admin(call):   
        if group_code.endswith("d"):
            group_key = group_code[:-5]
        else:
            group_key = group_code[:-4]
        group_rus = all_groups[group_key]["subgroups"][group_code]
                
        markup = types.InlineKeyboardMarkup()
        edit_schedule = types.InlineKeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"{group_code}_edit")
        add_admin = types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data=f"{group_code}_add_admin")
        remove_admin = types.InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data=f"{group_code}_remove_admin")
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=group_code)
        
        markup.add(edit_schedule)
        markup.row(add_admin, remove_admin)
        markup.add(back)
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.id,
            text=f"‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å - {group_rus}",
            reply_markup=markup
        )
    else:
        markup = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=group_code)
        markup.add(back)
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.id,
            text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã",
            reply_markup=markup
        )
        
        
def handle_add_group_admin(call, bot):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞"""
    if is_group_admin(call, group_code) or is_admin(call):  
        group_code = call.data.split("_add_admin")[0]
        
        with mysql.connector.connect(
            host=host,
            user=user,
            password=password,
            database=db_name
        ) as conn:
            with conn.cursor(buffered=True) as cur:
                cur.execute("INSERT IGNORE INTO group_admins (group_code, waiting_admin) VALUES (%s, TRUE)", 
                        (group_code,))
                cur.execute("UPDATE group_admins SET waiting_admin = TRUE WHERE group_code = %s", 
                        (group_code,))
                conn.commit()
        
        markup = types.InlineKeyboardMarkup()
        cancel = types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"{group_code}_cancel_add")
        markup.add(cancel)
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.id,
            text="üì¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã.",
            reply_markup=markup
        )
        bot.register_next_step_handler(call.message, process_new_admin_id, group_code)
    else:
        markup = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=group_code)
        markup.add(back)
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.id,
            text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã",
            reply_markup=markup
        )
    

def process_new_admin_id(message, group_code):
    """–í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞"""
    try:
        new_admin_id = int(message.text)
        
        with mysql.connector.connect(
            host=host,
            user=user,
            password=password,
            database=db_name
        ) as conn:
            with conn.cursor(buffered=True) as cur:
                cur.execute("INSERT INTO group_admins (group_code, admin_id) VALUES (%s, %s)",
                          (group_code, new_admin_id))
                conn.commit()

        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"{timestamp} - –¥–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω {new_admin_id} –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –≥—Ä—É–ø–ø—ã {group_code} - –¥–æ–±–∞–≤–∏–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} {message.from_user.first_name}\n"
        
        with open('log.txt', 'a', encoding='utf-8') as f:
            f.write(log_entry)


        markup = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"{group_code}_adm")
        markup.add(back)
        
        bot.send_message(message.chat.id,
                        f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (ID: {new_admin_id}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω",
                        reply_markup=markup)
                        
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")


def cancel_add_admin(call, bot):
    """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
    if is_group_admin(call, group_code) or is_admin(call):
        group_code = call.data.split('_cancel_')[0]
        
        markup = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"{group_code}_adm")
        markup.add(back)
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.id,
            text="‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=markup
        )
        
        bot.clear_step_handler_by_chat_id(call.message.chat.id)
    else:
        markup = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=group_code)
        markup.add(back)
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.id,
            text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã",
            reply_markup=markup
        )


def handle_remove_group_admin(call, bot):
    """–£–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞"""
    if is_group_admin(call, group_code) or is_admin(call):
        group_code = call.data.split("_remove_admin")[0]
        markup = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"{group_code}_cancel_add")
        markup.add(back)
        msg = bot.send_message(call.message.chat.id, "üì¨ –í–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≥—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:", reply_markup=markup)
        bot.register_next_step_handler(msg, lambda m: process_remove_group_admin(m, bot, group_code))
    else:
        markup = types.InlineKeyboardMarkup()
        back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=group_code)
        markup.add(back)
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.id,
            text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã",
            reply_markup=markup
        )


def process_remove_group_admin(message, bot, group_code):
    """–í–≤–æ–¥ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    if is_group_admin(message, group_code) or is_admin(message):
        try:
            admin_id = int(message.text)
            conn = mysql.connector.connect(
                host=host,
                user=user,
                password=password,
                database=db_name
            )
            cursor = conn.cursor()
            
            cursor.execute("SELECT * FROM group_admins WHERE group_code = %s AND admin_id = %s",
                        (group_code, admin_id))
            
            if cursor.fetchone():
                cursor.execute("DELETE FROM group_admins WHERE group_code = %s AND admin_id = %s",
                            (group_code, admin_id))
                conn.commit()
                
                markup = types.InlineKeyboardMarkup()
                back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"{group_code}_adm")
                markup.add(back)
                timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                log_entry = f"{timestamp} —É–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω {admin_id} –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ –≥—Ä—É–ø–ø—ã {group_code} - —É–¥–∞–ª–∏–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} {message.from_user.first_name}\n"
        
                with open('log.txt', 'a', encoding='utf-8') as f:
                    f.write(log_entry)
                bot.send_message(message.chat.id, 
                            f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (ID: {admin_id}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
                            reply_markup=markup)
            else:
                bot.send_message(message.chat.id, "‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
            cursor.close()
            conn.close()
            
        except ValueError:
            bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID")
        else:
            markup = types.InlineKeyboardMarkup()
            back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=group_code)
            markup.add(back)
            
            bot.edit_message_text(
                chat_id=message.message.chat.id,
                message_id=message.message.id,
                text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã",
                reply_markup=markup)