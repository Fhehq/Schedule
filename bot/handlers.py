from datetime import datetime


from telebot import types
from colorama import init, Fore


from bot.admin import is_admin, check_user_group
from bot.admin_groups import is_group_admin, import_group



init(autoreset=True)
DAYS = ("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞")
DAYS_ENG = ('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')

def week_type() -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞–∫–æ–π —Ç–∏–ø –Ω–µ–¥–µ–ª–∏"""
    today = datetime.today()
    week_number = today.isocalendar()[1]
    return "–Ω–µ—á–µ—Ç–Ω–∞—è" if week_number % 2 == 0 else "—á–µ—Ç–Ω–∞—è"


def create_week_keyboard(group_key: str, call):
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–µ–π–±–æ–∞—Ä–¥ –≥—Ä—É–ø–ø—ã"""    
    chat_id = call.chat.id if hasattr(call, 'chat') else call.message.chat.id

    markup = types.InlineKeyboardMarkup()
    today = datetime.now()
    weekday = today.weekday()
    tomorrow = (weekday + 1) % 7
    current_week = "chet" if week_type() == "—á–µ—Ç–Ω–∞—è" else "nechet"
    
    button = []
    
    day_codes = {
        0: "mon",
        1: "tue", 
        2: "wed",
        3: "thu",
        4: "fri"
    }

    if weekday < 5:
        today_callback = f"{group_key}_{current_week}_{day_codes[weekday]}"
        today_btn = types.InlineKeyboardButton(text="üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data=today_callback)
        button.append(today_btn)
  
    if tomorrow < 5 or weekday == 6:    
        if weekday == 6:
            current_week = "nechet" if current_week == "chet" else "chet"
        tomorrow_callback = f"{group_key}_{current_week}_{day_codes[tomorrow]}"
        tomorrow_btn = types.InlineKeyboardButton(text="üìÖ –ó–∞–≤—Ç—Ä–∞", callback_data=tomorrow_callback)
        button.append(tomorrow_btn)

    markup.row(*button)    
    chet_callback = f"{group_key}_chet"
    nechet_callback = f"{group_key}_nechet"
    
    chet = types.InlineKeyboardButton(text="üóìÔ∏è –ß–µ—Ç–Ω–∞—è", callback_data=chet_callback)
    nechet = types.InlineKeyboardButton(text="üóìÔ∏è –ù–µ—á–µ—Ç–Ω–∞—è", callback_data=nechet_callback)
    markup.row(chet, nechet)

    if is_group_admin(call, group_key) or is_admin(call):
        adm = types.InlineKeyboardButton(text="‚öôÔ∏è –ê–¥–º–∏–Ω –º–µ–Ω—é", callback_data=f"{group_key}_adm")
        markup.add(adm)
        
    has_group, group = check_user_group(chat_id)
    if has_group == True and group == group_key: 
        delete_btn = types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –º–æ—é –≥—Ä—É–ø–ø—É", callback_data="delete_my_group")
        markup.add(delete_btn)
        
    if group_key.endswith("d"):
        back = types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=group_key[:-5])
    else:
        back = types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=group_key[:-4])
    markup.add(back)
    return markup


def create_back_button(current_callback_data, campus: str): 
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥"""
    parts = current_callback_data.split("_")
    if len(parts) > 2:  
        back_data = "_".join(parts[:-1])
    elif len(parts) == 2:  
        back_data = parts[0]  
    else:
        back_data = campus  
    return types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=back_data)


def create_day_keyboard(group_key, week_type, campus: str):
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏"""
    if week_type == "—á–µ—Ç–Ω—É—é":
        week_type = "chet"
    else:
        week_type = "nechet"
    markup = types.InlineKeyboardMarkup()
    for ind in range(len(DAYS)):
        callback = f"{group_key}_{week_type}_{DAYS_ENG[ind][:3].lower()}"
        print(Fore.CYAN+f"—Å–æ–∑–¥–∞–Ω callback: {callback}")
        button = types.InlineKeyboardButton(text=DAYS[ind], callback_data=callback)
        markup.add(button)
    markup.add(create_back_button(f"{group_key}_{week_type}", campus))
    return markup


def handle_group_select(call, bot, group_key, campus: str):
    """–í—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    markup = types.InlineKeyboardMarkup()
    GROUPS = import_group(campus)
    for subgroup_key, subgroup_name in GROUPS[group_key]["subgroups"].items():
        callback_data = subgroup_key
        button = types.InlineKeyboardButton(text=subgroup_name, callback_data=callback_data)
        markup.add(button)
    markup.add(create_back_button(call.data, campus))
    
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.id,
        text=f'‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {GROUPS[group_key]["name"]}\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:',
        reply_markup=markup
    )


def handle_week_select(call, bot, subgroup_key, campus: str):
    markup = create_week_keyboard(subgroup_key, call)
    groups = import_group(campus)
    group_name = None
    for group_data in groups.values():
        if subgroup_key in group_data["subgroups"]:
            group_name = group_data["subgroups"][subgroup_key]
            break
    
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.id,
        text=f'‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É {group_name}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–µ–¥–µ–ª–∏:\n(–°–µ–π—á–∞—Å {week_type()} –Ω–µ–¥–µ–ª—è)',
        reply_markup=markup
    )